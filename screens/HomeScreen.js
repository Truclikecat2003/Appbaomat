import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, Image, Alert, Modal } from 'react-native';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import styles from '../Code/style';
import MenuComponent from '../Code/MenuComponent';
import CacBaiTrain from '../Code/CacBaiTrain';
import GiaoDuc from '../Code/GiaoDuc';
import BangDieuKhien from '../Code/bangdieukhien';
import * as ImagePicker from 'expo-image-picker';
import Login from '../Code/Login';
import { useNavigation } from '@react-navigation/native';

const HomeScreen = () => {
  const [menuVisible, setMenuVisible] = useState(false);
  const [avatar, setAvatar] = useState(require('../Pic/anh.jpg'));
  const [modalVisible, setModalVisible] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false); // Tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
  const navigation = useNavigation(); // ƒêi·ªÅu h∆∞·ªõng

  // Y√™u c·∫ßu quy·ªÅn truy c·∫≠p camera/th∆∞ vi·ªán ·∫£nh
  const requestPermissions = async () => {
    const { status: cameraStatus } = await ImagePicker.requestCameraPermissionsAsync();
    const { status: libraryStatus } = await ImagePicker.requestMediaLibraryPermissionsAsync();

    if (cameraStatus !== 'granted' || libraryStatus !== 'granted') {
      Alert.alert("Quy·ªÅn truy c·∫≠p b·ªã t·ª´ ch·ªëi!", "B·∫°n c·∫ßn c·∫•p quy·ªÅn ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.");
      return false;
    }
    return true;
  };

  // Ch·ª•p ·∫£nh t·ª´ camera
  const handleCapturePhoto = async () => {
    const hasPermission = await requestPermissions();
    if (!hasPermission) return;

    setModalVisible(false);
    let result = await ImagePicker.launchCameraAsync({ allowsEditing: true, aspect: [4, 4] });

    if (!result.canceled) {
      console.log("·∫¢nh ch·ª•p:", result.uri); // Ki·ªÉm tra ·∫£nh c√≥ ƒë√∫ng kh√¥ng
      setAvatar({ uri: result.uri }); // C·∫≠p nh·∫≠t avatar ngay sau khi ch·ª•p
    }
  };

  // Ch·ªçn ·∫£nh t·ª´ th∆∞ vi·ªán
  const handlePickPhoto = async () => {
    const hasPermission = await requestPermissions();
    if (!hasPermission) return;

    setModalVisible(false);
    let result = await ImagePicker.launchImageLibraryAsync({ allowsEditing: true, aspect: [4, 4] });

    if (!result.canceled) {
      console.log("·∫¢nh ch·ªçn:", result.uri); // Ki·ªÉm tra ·∫£nh c√≥ ƒë√∫ng kh√¥ng
      setAvatar({ uri: result.uri }); // C·∫≠p nh·∫≠t avatar ngay sau khi ch·ªçn
    }
  };

  // H√†m ƒëƒÉng xu·∫•t
  const handleLogout = () => {
    setIsLoggedIn(false);
    Alert.alert("Th√¥ng b√°o", "B·∫°n ƒë√£ ƒëƒÉng xu·∫•t", [
      { text: "OK", onPress: () => navigation.navigate('LoginScreen') } // Chuy·ªÉn ƒë·∫øn LoginScreen
    ]);
  };

  return (
    <View style={styles.container}>
      {isLoggedIn ? (
        <Login goBack={() => setIsLoggedIn(false)} /> // N·∫øu ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã Login.js
      ) : (
        <ScrollView style={styles.container}>
          {/* thanh menu */}
          <View style={styles.header}>
            {/* N√∫t menu (CƒÉn tr√°i) */}
            <TouchableOpacity style={styles.menuButton} onPress={() => setMenuVisible(!menuVisible)}>
              <Icon name="menu" size={28} color="#333" />
            </TouchableOpacity>
            {/* N√∫t Danh b·∫° */}
            <TouchableOpacity style={styles.loginButton} onPress={() => Alert.alert("Danh b·∫°", "T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn")}>
              <Text style={styles.loginText}>üìá Danh b·∫°</Text>
            </TouchableOpacity>
            {/* Ph·∫ßn avatar + n√∫t ƒëƒÉng nh·∫≠p (CƒÉn ph·∫£i) */}
            <View style={styles.rightSection}>
              <TouchableOpacity onPress={() => setModalVisible(true)}>
                <Image source={avatar.uri ? avatar : require('../Pic/anh.jpg')} style={styles.avatar} />
              </TouchableOpacity>
              <TouchableOpacity style={styles.loginButton} onPress={handleLogout}>
                <Icon name="exit-to-app" size={28} /> {/* Bi·ªÉu t∆∞·ª£ng tho√°t kh√¥ng m√†u */}
              </TouchableOpacity>
            </View>
          </View>

          {/* Modal ch·ªçn ·∫£nh */}
          <Modal animationType="slide" transparent={true} visible={modalVisible}>
            <View style={styles.modalContainer}>
              <View style={styles.modalContent}>
                <TouchableOpacity style={styles.modalButton} onPress={handleCapturePhoto}>
                  <Text style={styles.modalText}>üì∑ Ch·ª•p ·∫£nh</Text>
                </TouchableOpacity>

                <TouchableOpacity style={styles.modalButton} onPress={handlePickPhoto}>
                  <Text style={styles.modalText}>üñº Ch·ªçn ·∫£nh t·ª´ thi·∫øt b·ªã</Text>
                </TouchableOpacity>
                <TouchableOpacity style={styles.modalButton} onPress={() => setModalVisible(false)}>
                  <Text style={styles.modalText}>‚ùå H·ªßy</Text>
                </TouchableOpacity>
              </View>
            </View>
          </Modal>

          {/* Hi·ªÉn th·ªã danh s√°ch menu khi b·∫•m v√†o n√∫t */}
          {menuVisible && <MenuComponent />}
          {/* Th√™m d√≤ng vƒÉn b·∫£n ·ªü d∆∞·ªõi c√°c n√∫t */}
          <Text style={styles.description}>
            <Text style={styles.title}>M√¥ Ph·ªèng ƒê√†o T·∫°o An Ninh M·∫°ng</Text>{"\n"}
            <Text style={styles.italicText}>H·ªçc c√°ch nh·∫≠n bi·∫øt v√† ·ª©ng ph√≥ v·ªõi c√°c m·ªëi ƒëe d·ªça an ninh ph·ªï bi·∫øn</Text>
          </Text>
          {/* Th√™m d√≤ng k·∫ª ngang */}
          <View style={styles.separator}></View>
          <CacBaiTrain />
          {/* K·∫ª ngang */}
          <View style={styles.separator}></View>
          {/* Th√™m ph·∫ßn b·∫£ng ƒëi·ªÅu khi·ªÉn */}
          <BangDieuKhien />
          {/* Th√¥ng b√°o ch·ªâ d√†nh cho gi√°o d·ª•c */}
          <GiaoDuc />
        </ScrollView>
      )}
    </View>
  );
};

export default HomeScreen;
